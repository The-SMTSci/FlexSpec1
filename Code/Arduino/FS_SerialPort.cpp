/*****************************************************************************
*
*  FS_SerialPort.cpp --
*
* private:
*
*   string name  ; // Internal logical name of the port
*   string device; // Hardware Device 'name' of the port
*   int    baud  ; // serial port rate
*   int    start ; // count start bits
*   int    bits  ; // word size in bits
*   int    stop  ; // count stop bits
*   int    parity; // parity bits if used
*
* 
* ---------------------------------
* sudo usermod -a -G dialout $(USER)
* 
* 
* ---------------------------------
* /boot/cmdline.txt
* 
* ---------------------------------
* /etc/inittab
* Spawn a getty on Raspberry Pi serial line
* T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
* 
* ---------------------------------
* TXD pulses negative for approximately 32 Âµs (regardless of the baud rate)
*
*
*  Generated by insclass on Wed Jul 28 21:56:46 2021
*  g++ -c FS_SerialPort.cpp
*****************************************************************************/
#include "FS_SerialPort.h"
#include <string>

using namespace std;

/*****************************************************************************
*
*  FS_SerialPort::ThinkFast -- Constructor
*
* Get permission for fast interrupt check. FS_Dispatcher
*****************************************************************************/
void FS_SerialPort::ThinkFast()
{

   return  ; // INIT return a void

} // FS_SerialPort::ThinkFast

/*****************************************************************************
*
*  FS_SerialPort::Process -- Constructor
*
* Get permission for fast interrupt check. FS_Dispatcher
*****************************************************************************/
void FS_SerialPort::Process(string &jsonstring)
{

   return  ; // INIT return a void

} // FS_SerialPort::Process

/*****************************************************************************
*
*  FS_SerialPort::Report -- Constructor
*
* Get permission for fast interrupt check. FS_Dispatcher
*****************************************************************************/
void FS_SerialPort::Report(string &ref)
{

   return  ; // INIT return a void

} // FS_SerialPort::Report

/*****************************************************************************
*
*  FS_SerialPort::Inventory -- Constructor
*
* Load string with the inventory info
*****************************************************************************/
void FS_SerialPort::Inventory(string &ref)
{

   return  ; // INIT return a void

} // FS_SerialPort::Inventory
