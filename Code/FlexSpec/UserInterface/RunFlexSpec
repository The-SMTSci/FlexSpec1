#!/usr/bin/env bash
# -*- coding: utf-8 -*-

#############################################################################
# RunFlexSpec   dispatch server launcher
#    FlexSpec1/Code/FlexSpec/UserInterface/RunFlexSpec
# bokeh serve ./FlexSpec.py --unused-session-lifetime 3600000 --address 127.0.0.1
# uses: /home/git/external/FlexSpec1/Code/SBC/FlexSpecServer.py
#
# run from remote browser to: http://pier15.local/flexspec/ 
#
# This is a development / manual operations script. This is best controlled
# on the Raspberry Pi/FlexBerry with daemon processes via gning, systemctl,
# supervisor and gunicorn
#
# 2022-10-18T08:09:49-0600 wlg - Imporved process aborting
#                                added comments
#                                fixed an error where eno1 is port for dev 
#############################################################################

__version="0.0.3"

function usage {
   echo "Version $__version"
   echo "RunFlexSpec ... switches"
   echo "  -d show currently running ports listening to 5006"
   echo "  -p <ipname>  use: -p 'pier15.localhost'"
   echo "  -t <intervaltime> in microseconds 3600000 is one hour."
   echo "  -s - use show flag with bokeh."
   echo "  -v - pass verbose flag to FlexSpec."
   echo "  -h - show help an quit."
   echo "Run the $__version spectrograph interface."
   echo "Hint: ps aux | grep RunFlexSpec;    # and kill -9 the pid as needed."
   echo "      ps aux | grep FlexSpecServer; # and kill -9 the pid as needed."
   echo "sudo ss -lptn 'sport = :5006' # find pid for a port to kill -9"
}

# Pick up any command line options
# leading colon is silent. ":hb:" h has no option, b has an option.
# interval time of 360000 is 10 hours
# verbose flag descretion of the script writer
# currpid    the current pid of this task
# port       localhost:5000 for use on the same machine list with ip -4 a
intervaltime="3600000"            # Run for 100 hours 
currpid=""                        # remember the pid of the FlexServer
#ipname="$(hostname).local"        # -i the hostname bonjour format
ipname='localhost'
port="5006"                       # -p the port address (override)
verboseflag=""                    # -v be chatty

while getopts ":hdsvi:p:t:" opt ; do     # request to use master bib
   case $opt in
   h)
       usage                                 # help and quit
       exit 1
       ;; # process a two part parm
   d)
       lsof -i :5006                        # display current runnint ports
       exit 0                               # signal this filter was ok
       ;;
   p)
       port=${OPTARG}                       # assign different port for bokeh
       ;;
   i)
       ipname=${OPTARG}                     # assign different port for bokeh
       ;;
   s)
       showeflag="show"                     # run in show mode
       ;;
   v)
       verboseflag="-v"                      # various things to stdout
       ;;
   t)
       intervaltime=${OPTARG}               # how long to run [10 hours]
       ;;
   esac
done


# lsof -i :5006 | gawk -e '/bokeh/ {print "killing bokeh ",$2; exit}'
# look for all listening on port 5006... gently kill them

lsof -i :5006  | gawk -e '/bokeh/ {print "killing bokeh ",$2, system("kill -9 " $2); exit}'
lsof -i :65432 | gawk -e '/TCP localhost/ {print "killing our server ",$2, system("kill -9 " $2); exit}'

# if anything causes bash to die, remove that process
# allows for a clean restart
# trap this handler...
sigint_handler()
{
   if [ "$currpid" != "" ] ;  then kill -i "$pid"; fi
   echo "RunFlexSpec: Terminated $pid."
}

trap sigint_handler SIGINT                  # capture Ctrl-C from keyboard


# look to see if a FlexSpecServer is running and kill it.
# start the FlexSpecServer.py               # this is the flexspec 'DispatchServer'
#running="$( ps aux | gawk '/python.*FlexSpecServer/ && $0 !~ /gawk/ {print $2;}')"
#if test "$running" != "" ; then
#   kill -9 $running
#   echo killed $running
#fi

# Start the dispatch server
# repo root: FlexSpec1   Code/SBC/FlexSpecServer.py
../../SBC/FlexSpecServer.py "$verboseflag" &

export iplink=$(ip link show | gawk -e '/eth|eno/ {match($0, /(eth[0-9]|eno[0-9])/, arry ); if(arry[1] != "") {print arry[1];} }')

if test "$iplink" == ""; then 
   iplink = "eno1"
fi
#echo $iplink

export BOKEH_ALLOW_WS_ORIGIN="$ipname:$port"
# Finally! The bokeh command we want to run.
#export BOKEH_ALLOW_WS_ORIGIN="0.0.0.0:5006" # localhost:5006   # needed to satisfy bokeh host routing.
#export flexprefix="-- prefix /flexspec"

#export bkhost="--allow-websocket-origin=pier15.local"  # coming attraction 
#export bkhost="$BOKEH_ALLOW_WS_ORIGIN" # "--allow-websocket-origin=localhost:5006"
export bkcmd=" exec bokeh serve $show ./FlexSpec.py $bkhost --unused-session-lifetime $intervaltime"

if test "$verboseflag" != "" ; then
   echo "   show   $show"
   echo "   port   $iplink"
   echo "   bkhost $bkhost"
   echo "   bkcmd  $bkcmd"                  # the command we are about to do.
   echo "Environment"
   env >Run.log
fi

# echo pid; then the command.  '$$' is the pid of this script
# we offer up our resignation: 'echo "kill -9 $$"'
echo "bokeh serve $show ./FlexSpec.py $bkhost --unused-session-lifetime $intervaltime )"
currpid=$(echo "kill -9 $$"; bokeh serve $show ./FlexSpec.py $bkhost --unused-session-lifetime $intervaltime )
