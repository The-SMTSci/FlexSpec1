#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (compile "pydoc2.7 ./trim")
#
# (wg-astroconda3-pdb)      # CONDA Python3
#
# (wg-python-fix-pdbrc)

### HEREHEREHERE
from __future__ import print_function
if(0): import pdb   # pdb.set_trace()
import os
import optparse
import sys
import re
import numpy as np
#import pandas as pd
import astropy
from astropy.io import fits
import time

#############################################################################
#
#  bin/trim
# (wg-python-toc)
#
# __doc__ = """
# __author__  = 'Wayne Green'
# __version__ = '0.1'
# __all__     = ['','']   # list of quoted items to export
# class IRAFSectionException(Exception):
#     def __init__(self,message,errors=None):
#     @staticmethod
#     def __format__(e):
# class IRAFSection(object):
#     #__slots__ = [''] # add legal instance variables
#     def __init__(self,secdef="[*,*]",             # IRAFSection::__init__()
#     def secslice(self):                                   # IRAFSection::secslice
#     def compile(self,secdef=None):                        # IRAFSection::compile()
#     def convert(self,str,default):                        # IRAFSection::convert()
#     def __str__(self):                                    # IRAFSection.__str__()
#     def debug(self,msg="",skip=[],os=sys.stderr):          # IRAFSection::debug()
# def __regression__():
# if __name__ == "__main__":
#
#
#
#############################################################################
__doc__ = """

bin/trim [options] files...

"-f", "--force"   <bool>           force -s over env; env over file
"-p", "--prefix"  <str>            prefix string (t_).
"-o", "--output"  <bool>           write a new file..
"-s", "--section" <[X1:X2,Y1:Y2]>  section in IRAF/FITS coordinates.
"-v", "--verbose" <bool>           be verbose about work.

The specified trim section may be in the file, specified by user
via the -s switch or generically by an 'export TRIMSEC='[600:*,550:750]'
or occur in the file.

Under normal usage: No -s switch will fall back to the file, then
fall back to the env. The '-s' always takes precedence.

The -f switch force env over any file definition. In essence
rewrites the TRIMSEC keyword. You can always leave the -s
switch off -- but if there -f will take it as last resort.
None of header, -s or env will skip the file.

The X and Y coordintes are 1s based. A splat ('*') may be used
to stand in for the values,

*:1234      everything   upto/including 1234
150:*       start at 150 upto/including end
[*,500:600] all x, but 500-through 600 for y.

TRIMSEC is the part of the image to keep.  It may be in a header, or
in the local envrionment.  Inside PyRAF the Python os.environ['TRIMSEC'] =
'[*,185:1120]' will do the trick. This in turn writes the TRIMSEC into
the header.  Pay attention to numpy indexing!  All files are presumed
to be bigger than the section.

Note: Import this module for access to classes herein.

"""

__author__  = 'Wayne Green'
__version__ = '0.1'
__all__     = ['IRAFSection','IRAFSectionException','TrimFITSFile','TrimFITSFileException']   # list of quoted items to export


##############################################################################
# IRAFSectionException
#
##############################################################################
class IRAFSectionException(Exception):
    """Special exception to allow differentiated capture of exceptions"""
    def __init__(self,message,errors=None):
        super(IRAFSectionException,self).__init__("IRAFSection "+ message)
        self.errors = errors
    @staticmethod
    def __format__(e):
        return " IRAFSection: {}\n".format(e.__str__())
# IRAFSectionException

##############################################################################
# IRAFSection
#
##############################################################################
class IRAFSection(object):
    """Given a string with the section definition, make two np.slices to
    handle operations. The goal is to make two slices 1 for X and one for
    Y.

    """
    #__slots__ = [''] # add legal instance variables
    # (setq properties `("" ""))
    _clean = re.compile(r'["\'\s[\]]+')  # PDB -DEBUG
    _nobraces = re.compile
    def __init__(self,header = {}, secdef="[*,*]"):
        """
           The IRAF section wildcard is *
           its from:to inclusive. (Unlike numpy where the end is one more
              than the index needed.
           * *:10  10:* are the *:* acceptable forms.
           A leading "-" will transpose               (unimplemented)
           More than one section field for cubes etc. (unimplemented)
        """
        self.secdef = self._clean.sub('',secdef)  # clear typo spaces to be sure
        self.header = header
        self.naxis1 = header.get('NAXIS1',None)
        self.naxis2 = header.get('NAXIS2',None)
        self.slicex = slice(0,0)                         # default slices
        self.slicey = slice(0,0)
        self.compile()

    ### IRAFSection.__init__()

    def secslice(self):                                   # IRAFSection::secslice
        """return a proper slice"""
        #print(f"slicex={self.slicex} ,slicey={self.slicey}")
        return (self.slicex, self.slicey)

    ### IRAFSection.secslice

    def compile(self,secdef=None):                        # IRAFSection::compile()
        """Compile the local one, or replace with given one
           secdef='[10:100,20:200]'
           set up the parts and slices in numpy format
        """
        if(secdef is None):
            secdef = self.secdef
        s        = self._clean.sub('',secdef)
        secparts = s.split(':')                 # PDB-DEBUG
        try:
            parts1      = secparts[0].split(',')+['']  # [v,?,''] or [v,''] at least 2
            parts2      = secparts[1].split(',')+['']
            parts1[0]   = self.convert(parts1[0],        0)  # ints, numpy range values.
            parts1[1]   = self.convert(parts1[1],self.naxis1 - 1)
            parts2[0]   = self.convert(parts2[0],        0)
            parts2[1]   = self.convert(parts2[1],self.naxis2 - 1)
            self.slicex = slice(parts1[0],parts1[1])
            self.slicey = slice(parts2[0],parts2[1])
        except Exception as e:
            print(f"secparts {secparts}")
            print(f"parts1 {parts1}")
            print(f"parts2 {parts2}")
            raise  IRAFSectionException("IRAFSection.compile: " + e.__str__(),secparts)

    ### IRAFSection.compile()

    def convert(self,str,default):                        # IRAFSection::convert()
        """Check string for * and sub as needed"""
        try:
            if(str == '*'):
                str = default
            elif(str == ''):
                str = default
            else:
                str = int(str) - 1
        except Exception as e:
            msg = "IRAFSection.convert: bad section variable: {} {}\n"
            raise  IRAFSectionException(msg.format(self.section,str,e__str__()))
        return str

    ### IRAFSection.convert()

    def __str__(self):                                    # IRAFSection.__str__()
        """Convert the slicex and slicey into a TRIMSEC format"""
        ret = "[{}:{},{}:{}]".format(self.slicex.start+1, self.slicex.stop+1, # add back in the 1
                                     self.slicey.start+1, self.slicey.stop+1)
        return ret

    ### IRAFSection.__str__()

    def debug(self,msg="",skip=[],os=sys.stderr):          # IRAFSection::debug()
        """Help with momentary debugging, file to fit.
           msg  -- special tag for this call
           skip -- the member variables to ignore
           os   -- output stream: may be IOStream etc.
        """
        import pprint
        print(("IRAFSection - %s " % msg),file=os)
        for key,value in self.__dict__.items():
            if(key in skip):
               continue
            print('{:20s} ='.format(key),file=os,end='')
            pprint.pprint(value,stream=os,indent=4)
        return self

    ### IRAFSection.debug()

# class IRAFSection

def __regression__():
    """Regression test"""
    tsec = [ '[*,*]','[10:100,20:200]',  '[*:100,20:*]', '[*,*:300]' ]
    header = {'NAXIS1':1000, 'NAXIS2' : 2000}
    d = np.ones((2000,1000)).T
    for i,t in enumerate(tsec):
        print("__regression__ testing {}".format(t))
        s = IRAFSection(t,header)
        refd = d[s.secslice()]
        print("__regression__ ",s," ",s.secslice(),refd.shape)

# __regression__

##############################################################################
# TrimFITSFileException
#
##############################################################################
class TrimFITSFileException(Exception):
    """Special exception to allow differentiated capture of exceptions"""
    def __init__(self,message,errors=None):
        super(TrimFITSFileException,self).__init__("TrimFITSFile "+ message)
        self.errors = errors
    @staticmethod
    def __format__(e):
        return "TrimFITSFile: {}\n.format(e.__str__())"

# TrimFITSFileException

##############################################################################
# TrimFITSFile
#
##############################################################################
class TrimFITSFile(object):
    """ Trim a fits file.
    """
    def __init__(self,pargs,poptions={}):                            # TrimFITSFile::__init__()
        """Args are the non-switch arguments, presumed to be filenames,
        poptions is the options structure containing the switches.
        """
        msg            = ""                                         # bread crumb trail

        tmpsec = poptions.get('section',None)                       # get the option or none
        if(tmpsec == None):
            if( 'TRIMSEC' not in os.environ): # PDB-DEBUG
                msg = "TrimFITSFile: No idea for trimsection use environment, or set options.section.\n"
            else:
                tmpsec = os.getenv('TRIMSEC')
        if(len(args) == 0):
            msg += "TrimFITSFile: No files given.\n"

        self.args           = pargs                                 # list of files or sources
        self.options        = poptions;                             # call from main with options.__dict__
        self.usection       = self.options.get('section',None)      # user supplied section
        self.envsection     = os.getenv('TRIMESEC')                 # Take -s over env var.
        self.sectionchoices = [self.usection, self.envsection]      # remember both
        self.files          = []                                    # allow at-files with prefix concat
        self.verboseflag    = self.options.get('verboseflag',False)
        self.prefix         = self.options.get('prefix',None)
        self.force          = self.options.get('force',None)
        self.convdate       = time.strftime("%Y-%m-%dT%H:%M:%S", time.gmtime()) # when we did these trims
        self.filecount      = 0                                     # keep track of count of candidates
        if(self.usection is None):
            self.usection = os.getenv('TRIMESEC')                   # check for environment variable
        self.section        = None                                  # instance global
        # TRIMSEC may be in the files...
        if(msg != ""):
            raise  TrimFITSFileException(msg)

    ### TrimFITSFile.__init__()

    def getfilenames(self):
        """From the args, get the filenames"""
        for v in self.args:
            if('@' in v):
                pre = ""
                if("//" in v):
                    pre,v = v.split('//')
                if('@' in v):
                    _,listname = v.split('@')
                if(len(listname) == 2):
                    pre,listname = listname
                with open(listname,'r') as listoffiles:
                    for f in listoffiles:
                        self.files.append(pre+f.strip())
            else:
                self.files.append(v)

        return self

    ### TrimFITSFile.getfilenames()

    def compile(self):
        """Do the actual work"""
        newfiles = [] # PDB-DEBUG
        for filename in self.files:                                 # take care of wild cards...
            if('*' in filename):                                    # ... more for pdb.
                import glob
                newfiles = newfiles + glob.glob(filename)
            else:
                newfiles.append(filename)

        self.files = newfiles

        for filename in self.files:
            if(self.options.get('verboseflag')):
                print("TrimFITSFile.compile Processing {}".format(filename))
            try:
                hint             = "Opening file {}.format(filename)"
                self.section     = None
                with fits.open(filename) as f:                 # open the fits file
                    d            = f[0].data.T                 # 'T'ranspose into IRAF order (zero based!)
                    h            = f[0].header                 # grab header naxis{1,2}
                hint             = "Critical checks:"
                if(h['NAXIS'] == 1):
                    raise  SectionException("{} NAXIS1 and NAXIS2 are needed to trim".format(filename))
                if(self.verboseflag) : print(hint,self.sectionchoices)
                mysection        = [x for x in self.sectionchoices if x is not None] # choose the slice to use
                if(self.verboseflag) : print(f"hint={hint}, section to use = {mysection}")
                hint             = "Using force"
                if(self.force):
                    mysection.reverse()                        # reverse choices
                use_section      = mysection[0]
                if(self.verboseflag) : print(f"use_section = {use_section}")
                hint             = "Getting section"
                self.section     = IRAFSection(h,use_section)  # brew up a value may be whole image

                hint             = "Subsection of image {}".format(self.usection)
                newslice         = self.section.secslice()          # PDB-DEBUG
                if(self.verboseflag) : print(f"newslice={newslice}")
                newd             = d[newslice]
                if(self.verboseflag) : print(f"trimmed shape {newd.shape} slice={newslice}")

                outname          = self.prefix + filename
                # fix up the header.
                hint = "Allocating FITS file with data shape={}".format(d.shape)
                hdu              = fits.PrimaryHDU(newd.T)     # transpose back to FITS
                newh             = hdu.header                  # astropy.io.fits.header.Header
                hint = "Adding a few descriptions"             # PDB-DEBUG
                if(self.options['omitwcs']):
                    if(self.verboseflag) : print("Adding wcs {}".format(self.options['omitwcs']))
                    self.addwcs(newh,newslice,filename)            # add the wcs info to new header.
                hint = "Updating the header"
                for c in h.cards:                              # PDB -DEBUG
                    if(c[0] not in newh):                      # c[0] is keyword
                        newh.append(c)
                hint = "hdu.writeto()"   # PDB-DEBUG
                fits.writeto(outname,newd.T,header=h,output_verify='silentfix',overwrite=True)
                if(self.verboseflag):
                    print(f"TrimFITSFile.compile Wrote {outname}",file=sys.stderr)
                self.filecount += 1
            except Exception as e:
                raise TrimFITSFileException(f"trim: file={filename} hint={hint}\n{e.__str__()}")

        return self

    ### TrimFITSFile.compile()

    def addwcs(self,newh,newslice,filename):
        """Add the wcs to the emerging new file."""
        newh['ORIGNAME'] = ("{}".format(filename))     # keep this card short
        newh['TRIMSEC']  = ("{}".format(self.section),  "Section of original image")
        newh['TRIMDATE'] = (self.convdate, "date of trim operation")

        newh['WAT0_001'] = ('system=physical'),        # toss in a logical IMAGE WCS
        newh['WAT1_001'] = ('wtype=linear')
        newh['WAT2_001'] = ('wtype=linear')
        newh['LTV1']     = (- newslice[0].start  , "Lower X offset") # back to IRAF
        newh['LTV2']     = (- newslice[1].start  , "Lower Y offset") # remember .T above
        newh['LTM1_1']   = (1.0                  , "Scale X")
        newh['LTM2_2']   = (1.0                  , "Scale Y")

    def debug(self,msg="",skip=[],os=sys.stderr):           # TrimFITSFile::debug()
        """Help with momentary debugging, file to fit.
           msg  -- special tag for this call
           skip -- the member variables to ignore
           os   -- output stream: may be IOStream etc.
        """
        import pprint
        print("TrimFITSFile - %s " % msg, file=os)
        for key,value in self.__dict__.items():
            if(key in skip):
               continue
            print('{:20s} ='.format(key),file=os,end='')
            pprint.pprint(value,stream=os,indent=4)
        return self

    ### TrimFITSFile.debug()


# class TrimFITSFile

##############################################################################
#                                    Main
#                               Regression Tests
##############################################################################
# HEREHEREHERE
if __name__ == "__main__":
    opts = optparse.OptionParser(usage="%prog "+__doc__)

    opts.add_option("-p", "--prefix", action="store", dest="prefix",
                   default='t_',
                   help="<str>     prefix string (t_).")

    opts.add_option("-s", "--section", action="store", dest="section",
                   default=None,
                   help="<[X:X,Y:Y]>     section in FITS IRAF/coordinates.")

    opts.add_option("-f", "--force", action="store_true", dest="force",
                   default=False,
                   help="<bool>     force -s over env over file.")

    opts.add_option("-o", "--output", action="store_true", dest="output",
                   default=False,
                   help="<bool>     write a new file..")

    opts.add_option("-w", "--wcs", action="store_false", dest="omitwcs",
                   default=True,
                   help="<bool>     don't write a WCS into the header.")

    opts.add_option("-v", "--verbose", action="store_true", dest="verboseflag",
                   default=False,
                   help="<bool>     be verbose about work.")

    (options, args) = opts.parse_args()

    ret = 0
    try:
        app = TrimFITSFile(args,options.__dict__)
        app.getfilenames().compile()   # PDB-DEBUG
    except Exception as e:
        #if(options.verboseflag):
        #    print(e,file=sys.stderr)
        #app.debug(skip=['args','files'])
        raise #e;
        ret = 1
    sys.exit(ret)


